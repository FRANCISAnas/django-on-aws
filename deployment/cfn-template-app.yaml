AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'AWS CloudFormation Sample Template cfn-template-app: Create
  a load balanced, Auto Scaled sample website. This example creates an Auto Scaling
  group with time-based scheduled actions behind a load balancer with a simple health
  check. AutoScalingRollingUpdate
  SSM Session Manager enabled. The SSM Agent running on the EC2 instances must be able to connect
  to Session Managerâ€™s public endpoint. R53 failover could be use for a warm standby dr with scaled down
  version of the app in another region/vpc
  The application is configured to span all Availability Zones in the
  region and is Auto-Scaled based on the CPU utilization of the web servers. Notifications
  will be sent to the operator email address on scaling events. The instances are
  load balanced with a simple health check against the default web page.'
Parameters:
  ALBExistingCertArn:
    Description: SSL Cert Arn stored in ACM with the same region as the ALB
    Type: 'String'
    Default: 'arn:aws:acm:eu-west-2:164045463835:certificate/7dea44a5-ab6d-48f9-9105-396cbdbaed91'
  ASGCPUTargetTrackingScaling:
    Description: Average CPU Target for each instance (eg. 60%). Default set to 0 to disable the Target Tracking Scaling policy
    Type: Number
    MinValue: 0
    MaxValue: 100
    Default: 0
  CloudFrontExistingCertArn:
    Description: SSL Cert Arn stored in ACM with the same region CloudFront (us-east-1)
    Type: 'String'
    Default: 'arn:aws:acm:us-east-1:164045463835:certificate/26654aed-53fe-4033-9866-9b072ad88ed8'
  EC2LatestLinuxAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    AllowedValues: [/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2] # Amazon Linux 2
  EC2InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small]
    ConstraintDescription: must be a valid EC2 instance type.
  EC2VolumeSize:
    Description: Volume size mounted to EC2
    Type: Number
    MinValue: 8
    MaxValue: 20
    Default: 8
  R53HostedZoneName:
    Description: The DNS name of an existing Amazon Route 53 hosted zone. For example, "mydomain.com" 
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    Type: String
    Default: 'bournique.fr'
    ConstraintDescription: Must be a valid DNS zone name.
  R53Subdomain:
    Description: The subdomain of the dns entry. For example, app -> app.mydomain.com.
    Type: String
    Default: 'app'
  S3BucketNameCodeDeployArtifacts:
    Description: S3 bucket name to store artifacts for CodeDeploy
    Type: 'String'
    Default: 'codedeploy-s3-bournique'
  SSMParamCWAgentConfig:
    Description: SSM Parameter name for the CloudWatch Agent Configuration JSON file
    Type: String
    Default: '/CLOUDWATCH_AGENT/CONFIG'
  SubnetList:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Default: 'subnet-103a1a79,subnet-28219264'
  TargetGroupVpc:
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Type: 'AWS::EC2::VPC::Id'
    Default: 'vpc-e82c7280'
Mappings:
  Region2Examples:
    eu-west-2:
      Examples: https://s3-eu-west-2.amazonaws.com/cloudformation-examples-eu-west-2
  Region2S3WebsiteSuffix:
    eu-west-2:
      Suffix: .s3-website.eu-west-2.amazonaws.com

Conditions:
  AddCPUTargetTrackingScaling: !Not [ !Equals [ !Ref ASGCPUTargetTrackingScaling, 0 ] ]

Resources:
  S3BucketCodeDeployArtifacts:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref 'S3BucketNameCodeDeployArtifacts'
      VersioningConfiguration:
        Status: Enabled

  CodeDeployRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: allow-autoscaling
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:*
                  - autoscaling:*
                Resource: "*"

  EC2InstanceRole:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref 'AWS::StackName', !Ref 'AWS::Region', AWSEC2InstanceRole]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        # Policy to enable use of SSM Session Manager to SSH from the AWS Console
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        # Policy for CodeDeploy agent to download artifacts from S3
        - PolicyName: AllowGetObjectsFromS3BucketCodeDeployArtifacts
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: [ 's3:Get*', 's3:List*' ]
                Resource: !Join ['', ['arn:aws:s3:::', !Ref 'S3BucketCodeDeployArtifacts', '/*']]
        # Policy to allow EC2 to interact with the CloudWatch service
        - PolicyName: !Join ['-', [!Ref 'AWS::StackName', !Ref 'AWS::Region', CloudWatchAgentServerPolicy]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - 'ssm:GetParameter'
                Resource: 'arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*'
                Effect: Allow
              - Action:
                  - 'cloudwatch:PutMetricData'
                  - 'ec2:DescribeVolumes'
                  - 'ec2:DescribeTags'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                  - 'logs:DescribeLogGroups'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                Resource: '*'
                Effect: Allow
  RootInstanceProfile:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2InstanceRole
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: 'HTTP'
      UnhealthyThresholdCount: 5
      VpcId: !Ref 'TargetGroupVpc'

  WebServerCPUTargetTrackingScalingPolicy:
    Condition: AddCPUTargetTrackingScaling
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref 'WebServerGroup'
      Cooldown: '60'
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref ASGCPUTargetTrackingScaling

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'SubnetList'
      LaunchConfigurationName: !Ref 'LaunchConfig'
      DesiredCapacity: '2' # Must match Count value for the CreationPolicy resource signal
      MaxSize: '5'
      MinSize: '0'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs: [!Ref 'MyTargetGroup']
      MetricsCollection: 
        - Granularity: "1Minute"
          Metrics: 
            - "GroupMinSize"
            - "GroupMaxSize"
    CreationPolicy: # signal back that all desired instances were created
      ResourceSignal:
        Count: '2' # Must match ASG DesiredCapacity
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate: # Replace one instance at a time
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT10M
        WaitOnResourceSignals: true
        SuspendProcesses:
        - ScheduledActions
      AutoScalingScheduledAction:
        # Prevent Scheduled Actions from modifying min/max/desired for CloudFormation
        IgnoreUnmodifiedGroupSizeProperties: true
  ScheduledActionUp:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref 'WebServerGroup'
      DesiredCapacity: 2
      MaxSize: 5
      MinSize: 1
      Recurrence: 0 19 * * *
  ScheduledActionDown:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref 'WebServerGroup'
      DesiredCapacity: 1
      MaxSize: 2
      MinSize: 0
      Recurrence: 0 23 * * *
  LaunchConfig: # Used by ASG to create new instances
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      # KeyName: !Ref 'KeyName'
      ImageId: !Ref EC2LatestLinuxAmiId
      IamInstanceProfile: !Ref RootInstanceProfile
      SecurityGroups: [!GetAtt 'InstanceSecurityGroup.GroupId']
      InstanceType: !Ref EC2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref EC2VolumeSize
            DeleteOnTermination: true
            Encrypted: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v \
            --stack ${AWS::StackId} \
            --resource LaunchConfig \
            --configsets InstallAndRun \
            --region ${AWS::Region}
          export APP_NAME=MySampleApp
          export INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
          export EC2_AVAIL_ZONE=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
          MSG="$APP_NAME says Hello v2! Hosted on $(hostname -f) (instance id: $INSTANCE_ID) in AZ $EC2_AVAIL_ZONE"
          echo $MSG >> /var/www/html/index.html
          echo "Healthy" > /var/www/html/health.html
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WebServerGroup --region ${AWS::Region}
    Metadata:
      Comment: Install a simple application
      AWS::CloudFormation::Authentication:
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-authentication.html
        S3AccessCreds:
          type: S3
          buckets: [ !Ref 'S3BucketCodeDeployArtifacts' ]
          roleName: !Ref 'EC2InstanceRole'
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
            - ConfigureCfnHup
            - InstallCloudWatchAgent
            - InstallCodeDeployAgent
            - InstallTemporaryApacheServer
        ConfigureCfnHup:
          files:
            # The cfn-hup.conf file stores the stack name and the AWS credentials that the cfn-hup daemon targets.
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                # The interval used to check for changes to the resource metadata in minutes. Default is 15
                interval=2
              mode: '000400'
              owner: root
              group: root
            # The user actions that the cfn-hup daemon calls periodically are defined in the hooks.conf config file.
            # To support composition of several applications deploying change notification hooks, cfn-hup supports a
            # directory named hooks.d that is located in the hooks configuration directory to place additional hooks.
            # The additional hooks files must use the same layout as the hooks.conf file.
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v \
                  --stack ${AWS::StackName} \
                  --resource LaunchConfig \
                  --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
          services:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
        InstallCloudWatchAgent:
          commands:
            01_install_cw_agent:
              command: |
                wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm \
                && sudo rpm -U ./amazon-cloudwatch-agent.rpm
            02_create_missing_files:
              command: |
                sudo mkdir -p /usr/share/collectd \
                && sudo touch /usr/share/collectd/types.db
            03_run_cw_agent:
              command: !Sub |
                sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
                  -a fetch-config \
                  -m ec2 \
                  -c ssm:${SSMParamCWAgentConfig} -s
        InstallCodeDeployAgent:
          packages:
            yum:
              ruby: []
          files:
            /home/ec2-user/install:
              source: !Join ['', ['https://aws-codedeploy-', !Ref 'AWS::Region', '.s3.amazonaws.com/latest/install']]
              mode: '000755'
          commands:
            00-install-agent:
              command: sudo ./install auto
              cwd: /home/ec2-user/
            01-check-agent-status:
              command: sudo service codedeploy-agent status
        InstallTemporaryApacheServer:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: !Join ['

                  ', [<img src=", !FindInMap [Region2Examples, !Ref 'AWS::Region',
                    Examples], /cloudformation_graphic.png" alt="AWS CloudFormation
                    Logo"/>, '<h1>Congratulations, you have successfully launched
                    the AWS CloudFormation sample.</h1>']]
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref 'ElasticLoadBalancer'
      Port: 80
      Protocol: 'HTTP'

  ALBListenerSSL:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref MyTargetGroup
      Certificates:
        - CertificateArn: !Ref ALBExistingCertArn
      LoadBalancerArn: !Ref 'ElasticLoadBalancer'
      Port: 443
      Protocol: 'HTTPS'

  ElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      LoadBalancerAttributes:
        - Key: 'deletion_protection.enabled'
          Value: 'false'
        - Key: 'access_logs.s3.enabled'
          Value: 'false'
      Scheme: 'internet-facing'
      Subnets: !Ref 'SubnetList'
      SecurityGroups:
        - !GetAtt 'ALBSecurityGroup.GroupId'

  WebsiteDNSName:
    Type: AWS::Route53::RecordSet
    Properties:
      Failover: PRIMARY
      SetIdentifier: R53-DNS-Failover-Primary
      HealthCheckId: !Ref 'Route53HealthCheck'
      HostedZoneName: !Join ['', [!Ref 'R53HostedZoneName', .]]
      Name: !Join ['', [!Ref 'R53Subdomain', ., !Ref 'R53HostedZoneName']]
      Comment: Zone apex alias targeted to the ALB.
      Type: A
      AliasTarget:
        DNSName: !GetAtt ElasticLoadBalancer.DNSName
        HostedZoneId: !GetAtt ElasticLoadBalancer.CanonicalHostedZoneID
        EvaluateTargetHealth: true

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the configured port
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Allow incoming from anywhere to HTTPS and HTTP"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443

  AWSLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref 'AWS::StackName', !Ref 'AWS::Region', AWSLambdaExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: "/"
      Policies:
      - PolicyName: !Join ['-', [!Ref 'AWS::StackName', !Ref 'AWS::Region', AWSLambdaCWPolicy]]
        PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          Version: '2012-10-17'
      - PolicyName: !Join ['-', [!Ref 'AWS::StackName', !Ref 'AWS::Region', AWSLambdaS3Policy]]
        PolicyDocument:
          Statement:
          - Action:
            - s3:PutObject
            - s3:DeleteObject
            - s3:List*
            Effect: Allow
            Resource:
            - !Sub arn:aws:s3:::${S3BucketForWebsiteContent}/*
            - !Sub arn:aws:s3:::${S3BucketForWebsiteContent}
            - !Sub arn:aws:s3:::${S3BucketCodeDeployArtifacts}/*
            - !Sub arn:aws:s3:::${S3BucketCodeDeployArtifacts}
          Version: '2012-10-17'
  S3BucketForWebsiteContent:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['', [!Ref 'R53Subdomain', ., !Ref 'R53HostedZoneName']]
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  BucketPolicyCredentials:  
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketForWebsiteContent
      PolicyDocument:
        Statement:
        - Sid: "AllowPublicGetObject"
          Action: [ 's3:Get*', 's3:List*' ]
          Effect: Allow
          Resource: !Join ['', ['arn:aws:s3:::', !Ref 'S3BucketForWebsiteContent', '/*']]
          Principal: "*"

  WebsiteCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: CDN for S3-backed website
        # CloudFront CNAME - must match the bucket name and the R53 CNAME record
        Aliases: [!Join ['', [!Ref 'R53Subdomain', ., !Ref 'R53HostedZoneName']]]
        Enabled: true
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: true
          TargetOriginId: only-origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Origins:
        - CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginProtocolPolicy: http-only
          # S3 website endpoint
          DomainName: !Join ['', [!Ref 'S3BucketForWebsiteContent', !FindInMap [Region2S3WebsiteSuffix,
                !Ref 'AWS::Region', Suffix]]]
          Id: only-origin
        ViewerCertificate:
          AcmCertificateArn: !Ref 'CloudFrontExistingCertArn'
          SslSupportMethod: sni-only
        # Logging:
        #   Bucket: !Sub '${LoggingBucket}.s3.amazonaws.com'

  S3CustomResource:
    Type: Custom::S3CustomResource
    Properties:
      ServiceToken: !GetAtt AWSLambdaFunction.Arn
      codedeploy_bucket_name: !Ref S3BucketCodeDeployArtifacts
      website_bucket_name: !Ref S3BucketForWebsiteContent
      index_html_content: !Sub |
        <!doctype html>
        <html lang="en">
        <head>
          <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
          <meta name="viewport" content="width=device-width, initial-scale=1"/>
          <meta name="description" content="Failover page for ${R53Subdomain}.${R53HostedZoneName}">
          <meta name="author" content="Guillaume Bournique">
          <title>Failover page</title>
          <link href="https://s3.eu-west-2.amazonaws.com/tarikitchen/django_files/static/css/materialize.css" type="text/css" rel="stylesheet" media="screen,projection"/>
          <link href="https://s3.eu-west-2.amazonaws.com/tarikitchen/django_files/static/css/style.css" type="text/css" rel="stylesheet" media="screen,projection"/>
          <link rel="shortcut icon" href="https://s3.eu-west-2.amazonaws.com/tarikitchen/django_files/static/favicon.ico">
          <link rel="apple-touch-icon" href="https://s3.eu-west-2.amazonaws.com/tarikitchen/django_files/static/apple-touch-icon.png">
        </head>
        <body>
          <header>
            <div class="navbar-fixed">
              <nav style="background-color:white">
                <div class="nav-wrapper container">
                  <a id="logo-container" href="/" class="brand-logo center">
                    <img class="img-responsive" style="width:250px; height:32px; margin-top:14px" src="https://s3.eu-west-2.amazonaws.com/tarikitchen/django_files/static/Logo.png">
                  </a>
                  <a href="#" data-target="nav-mobile" class="sidenav-trigger"><i class="material-icons">menu</i></a>
                </div>
              </nav>
            </div>
          </header>
          <main>	
            <div class="container">
              <div class="row">
                <center>
                  <br><br><br><br><br>
                  <h5>Oops.. ${R53Subdomain}.${R53HostedZoneName} is currently unavailable. Please try again between 10AM-6PM (GMT).</h5>
                  <br>
                  <a href="/" id="refresh-button" class="btn-large waves-effect waves-light brown lighten-1">Try again</a>
                </center>
              </div>
            </div>
            <br><br><br><br><br><br><br><br>
          </main>
          <footer>
            <footer id="my-footer" class="page-footer grey" style="position:sticky;bottom:0;left:0;width:100%;">
              <div class="container">
                Source code on <a class="grey-text text-darken-3" href="https://github.com/gbourniq/django-on-aws" target="_blank">Github</a>
                <br><br>
              </div>
            </footer>
          </footer>
        </body>
        </html>
      error_html_content: |
        <h1>Uh oh, there was an error with the S3 website</h1>
  AWSLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Work with S3 Buckets!"
      FunctionName: !Sub '${AWS::StackName}-${AWS::Region}-lambda'
      Handler: index.handler
      Role: !GetAtt AWSLambdaExecutionRole.Arn
      Timeout: 360
      Runtime: python3.6
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import uuid
          def handler(event, context):
              event_type = event['RequestType']
              print(f"{event_type} event received")
              response_data = {}
              # https://stackoverflow.com/questions/50599602/updating-custom-resources-causes-them-to-be-deleted
              resource_id = ""
              if "PhysicalResourceId" not in event:
                event['PhysicalResourceId'] = str(uuid.uuid1())
              resource_id = event['PhysicalResourceId']
              s3_client = boto3.client('s3')
              # Retrieve parameters
              codedeploy_bucket_name = event['ResourceProperties']['codedeploy_bucket_name']
              website_bucket_name = event['ResourceProperties']['website_bucket_name']
              try:
                  if event_type in ('Create', 'Update'):
                      s3_client.put_object(
                        Bucket=website_bucket_name,
                        Key="index.html",
                        Body=event['ResourceProperties']['index_html_content'].encode("utf-8"),
                        ContentType="text/html"
                      )
                      s3_client.put_object(
                        Bucket=website_bucket_name,
                        Key="error.html",
                        Body=event['ResourceProperties']['error_html_content'].encode("utf-8"),
                        ContentType="text/html"
                      )
                  elif event_type == 'Delete':
                    # Empty bucket(s)
                    boto3.resource('s3').Bucket(str(website_bucket_name)).objects.all().delete()
                    boto3.resource('s3').Bucket(str(codedeploy_bucket_name)).objects.all().delete()
                  print(f"{event_type} operation successful! Sending the signal back to cfn.")
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, resource_id)
              except Exception as e:
                  print(f"Execution failed... {e}")
                  response_data['Data'] = f"Execution failed... {e}"
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data, resource_id)
  FailoverWebsiteDNSName:
    Type: AWS::Route53::RecordSet
    Properties:
      Failover: SECONDARY
      SetIdentifier: R53-DNS-Failover-Secondary
      HostedZoneName: !Join ['', [!Ref 'R53HostedZoneName', .]]
      Name: !Join ['', [!Ref 'R53Subdomain', ., !Ref 'R53HostedZoneName']]
      Comment: Zone apex alias targeted to the CloudFront distribution
      Type: A
      AliasTarget:
        DNSName: !GetAtt [WebsiteCDN, DomainName]
        HostedZoneId: Z2FDTNDATAQYW2
        EvaluateTargetHealth: false

  Route53HealthCheck:
    Type: "AWS::Route53::HealthCheck"
    Properties:
      HealthCheckConfig:
        Port: 80
        Type: "HTTP"
        ResourcePath: "/"
        FullyQualifiedDomainName: !Join ['', [!Ref 'R53Subdomain', ., !Ref 'R53HostedZoneName']]
        RequestInterval: 30
        FailureThreshold: 3
      HealthCheckTags:
        - Key: "Name"
          Value: !Join ['', ['healthcheck-', !Ref 'R53Subdomain', ., !Ref 'R53HostedZoneName']]

  WebappApplication:
    Type: "AWS::CodeDeploy::Application"
  WebappDeploymentGroup:
    Type: "AWS::CodeDeploy::DeploymentGroup"
    Properties:
      ApplicationName: !Ref WebappApplication
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      AutoScalingGroups: [!Ref 'WebServerGroup']

Outputs:
  CodeDeployApplicationName:
    Description: CodeDeploy Application Name
    Value: !Ref 'WebappApplication'
  CodeDeployDeploymentGroupName:
    Description: CodeDeploy Deployment Group Name
    Value: !Ref 'WebappDeploymentGroup'
  CodeDeployS3BucketName:
    Description: Name of the S3 bucket used to store CodeDeploy artifacts
    Value: !Ref 'S3BucketCodeDeployArtifacts'
  AlbUrl:
    Description: Website URL (Application Load Balancer DNS Name)
    Value: !Join ['', ['https://', !GetAtt [ElasticLoadBalancer, DNSName]]]
  R53Url:
    Description: Website URL (Subdomain of the R53 DNS entry)
    Value: !Join ['', ['https://', !Ref 'WebsiteDNSName']]
  SessionManagementListUrl:
    Description: The URL to the Session Management Console listing all instances it is aware of
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/start-session?region=${AWS::Region}