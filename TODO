AWS Deployment
- logging bucket for cloudfront/ALB access logs + cloudtrail + vpc flow log to s3/cw
- review all resources configurations, rename variables, consistency, simplify, add comments, descriptions, etc
- review all policies, ensure least priviledge
- use of nested stack and best practices: eg: split R53 / ALB / CF-S3 / NETWORK+SGs?
- Use StackPolicies to prevent accidental updates / deletes to stack resources
- put cw log config within cfn template

- define DR strategy (eg. S3 bucket SRR/CRR)
- dev/prod var to be used to retain/snapshot resources: RDS, S3

- when everything looks good, replace the sample apache server with the django app (docker)
- codedeploy course + best practices (eg. customise deployment behavior with environment variables eg. DEPLOYMENT_GROUP_NAME==dev)
- add django logs + metrics filtering to CW dashboard
- define codedeploy/cicd strategy to managed dev/prod pipelines
- Check CW Events sources (eg. CodeDeploy as a source) for CI/CD workflows
- review 5 pillars - https://aws.amazon.com/architecture/
- network stack
- define Cloudfront caching strategy: Check/update cache based on Headers, Cookies, or Query string parameters
- review failover html page

Application features
- use of metric filter - eg. if too many 404 over 5mn -> trigger alarm (devops alarm)
- Use the DynamoDB streams + SNS/SQS queue for email/slack notifications on new posts, and user welcome email
- Worker tier: push data from django app to an SQS Queue with Lambda workers defined with AWS SAM
- Session data: Configure Django app to work with ElastiCache
- Try AWS Cognito for Users management and SSO
- use S3 event for notifications on new image / object created + sqs & put metadata to dynamodb?

Extras
- create custom metrics for failed/successful deployment and create pie chart in cw dashboard
- Remove open CidrIPs below - and have Lambda to dynamically update with CF public IPs
# https://aws.amazon.com/blogs/security/automatically-update-security-groups-for-amazon-cloudfront-ip-ranges-using-aws-lambda/



Nested stack:

Application
- ASG resources + LC/Userdata/cfn-init + IAM (instance profile)
- CodeDeploy + IAM

S3/Static
- S3 x3 + bucket policy x2
- S3 Custom resource

Serverless
- Lambda x3 + IAM x3 + Event source mapping + permission
- SNS, SQS

Database
- ElastiCache
- RDS

Network
- Route 53
- CF
- ELB
- SGs

for each template, check:
- quotes
- names, order parameters alphabetically
- remove TODOs



