AWS Deployment
- when everything looks good, replace the sample apache server with the django app (docker)
- codedeploy course + best practices (eg. customise deployment behavior with environment variables eg. DEPLOYMENT_GROUP_NAME==dev)
- add django logs + metrics filtering to CW dashboard
- define codedeploy/cicd strategy to managed dev/prod pipelines
- Check CW Events sources (eg. CodeDeploy as a source) for CI/CD workflows
- review 5 pillars - https://aws.amazon.com/architecture/
- review failover html page
- test rds snapshots when deleting stack and then restore it

Application features
- use of metric filter - eg. if too many 404 over 5mn -> trigger alarm (devops alarm)
- Use the DynamoDB streams + SNS/SQS queue for email/slack notifications on new posts, and user welcome email
- Worker tier: push data from django app to an SQS Queue with Lambda workers defined with AWS SAM
- Session data: Configure Django app to work with ElastiCache
- Try AWS Cognito for Users management and SSO
- use S3 event for notifications on new image / object created + sqs & put metadata to dynamodb?

Extras
- create custom metrics for failed/successful deployment and create pie chart in cw dashboard
- define/refine Cloudfront caching strategy: Check/update cache based on Headers, Cookies, or Query string parameters
- Remove open CidrIPs below - and have Lambda to dynamically update with CF public IPs
# https://aws.amazon.com/blogs/security/automatically-update-security-groups-for-amazon-cloudfront-ip-ranges-using-aws-lambda/





