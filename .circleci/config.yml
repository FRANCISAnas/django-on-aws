version: 2.1

workflows: # https://circleci.com/docs/2.0/configuration-reference/#workflows 
  main_workflow:
    jobs:
      - build-and-test

jobs:
  build-and-test:
    machine: true
    environment:
      PYTHON_VERSION: 3.5.5
      NUMPY_VERSION: 1.14.2
    steps:
      # Get the code
      - checkout
      # Checkcheck
      - run:
          name: Check docker
          command: docker --version
      - run:
          name: Install packages
          command: sudo apt-get install jq curl
      - run:
          name: Setup Miniconda
          command: |
            apt update
            apt install -y wget
            cd $HOME
            wget "https://repo.anaconda.com/miniconda/Miniconda3-4.7.10-Linux-x86_64.sh" -O miniconda.sh
            printf '%s' "8a324adcc9eaf1c09e22a992bb6234d91a94146840ee6b11c114ecadafc68121  miniconda.sh" | sha256sum -c
            bash miniconda.sh -b -p $HOME/miniconda
      - run:
          name: Setup environment and run tests
          command: |
            export PATH="$HOME/miniconda/bin:$PATH"
            conda update -y conda
            conda create -n myenv python=$PYTHON_VERSION -c conda-forge
            source activate myenv
            conda install -y numpy=$NUMPY_VERSION
            python --version
            python -c "import numpy; print(numpy.__version__)"
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.25.3/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: Check docker compose
          command: docker-compose --version
      - run:
          name: Check jq
          command: jq --help
      - run:
          name: Check conda
          command: conda --version
      - run:
          name: Check poetry
          command: poetry --version


      # # Cache can be tricky at first, but this means
      # # Please, restore my cache (what is actually on the cache will be defined later)
      # # if the text key `deps-{{ checksum "poetry.lock" }}` changes (and it WILL change everytime poetry.lock is updated since we rely on its checksum)
      # # and poetry.lock is updated every time we add a new dependency to our project
      # - restore_cache:
      #     keys: 
      #       - deps-{{ checksum "poetry.lock" }}

      # # Let's install the dependencies
      # - run:
      #     name: Install Dependencies
      #     command: |
      #       poetry install

      # # Save's the specified path as a cache. This is the path Poetry uses to install the dependencies
      # # So if you don't install anything new, this folder won't change and the cache will be effective
      # - save_cache:
      #     key: deps-{{ checksum "poetry.lock" }}
      #     paths: 
      #       - /home/circleci/.cache/pypoetry/virtualenvs

      # - run:
      #     name: Run tests
      #     # This assumes pytest is installed via the install-package step above
      #     command: pytest

